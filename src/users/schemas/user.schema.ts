import { Field, ID, ObjectType } from '@nestjs/graphql';
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import * as mongoose from 'mongoose';

export type UserDocument = User & mongoose.Document;

@ObjectType()
@Schema({ timestamps: true })
export class User {
  // auto-generated by mongoose, hence no need to self-define as mongoose prop
  @Field((type) => ID)
  _id: string;
  @Field()
  @Prop({ unique: true, required: true })
  username: string;
  @Field()
  @Prop({ unique: true, required: true })
  email: string;
  @Field()
  @Prop({ required: true })
  password: string;
  @Field({ nullable: true })
  @Prop()
  role?: string;
  @Field({ nullable: true })
  @Prop()
  is_activated?: boolean;
  @Field({ nullable: true })
  @Prop()
  name?: string;
  @Field({ nullable: true })
  @Prop()
  profile_picture?: string;
  @Field({ nullable: true })
  @Prop()
  gender?: string;
  @Field({ nullable: true })
  @Prop()
  dob?: Date;
  @Field({ nullable: true })
  @Prop()
  occupation?: string;
  // auto-generated by mongoose, hence no need to self-define as mongoose prop
  @Field()
  createdAt: Date;
  // auto-generated by mongoose, hence no need to self-define as mongoose prop
  @Field()
  updatedAt: Date;
}

export const UserSchema = SchemaFactory.createForClass(User);
